{"version":3,"sources":["context/user-context.js","reducers/users.js","serviceWorker.js","components/LoginPage.js","components/Header.js","components/Weather.js","components/Light.js","components/SensorValues.js","components/SensorDevice.js","components/Stove.js","components/Home.js","routers/AppRouter.js","index.js"],"names":["UserContext","React","createContext","usersReducer","state","action","type","user","userName","Boolean","window","location","hostname","match","LoginPage","dispatch","useContext","UsersContext","useState","setUserName","error","setError","className","onSubmit","e","preventDefault","history","push","placeholder","value","onChange","target","Header","users","isActive","setIsActive","onClick","Weather","setLocation","temperature","setTemperature","feelsLike","setFeelsLike","precip","setPrecip","humidity","setHumidity","wind","setWind","useEffect","a","fetch","then","response","json","name","current","feelslike","wind_speed","fetchData","toUpperCase","moment","format","icon","faCloud","size","Math","round","Light","isOn","setIsOn","faLightbulb","checked","uncheckedIcon","checkedIcon","offColor","onColor","SensorValues","data","number","unit","SensorDevice","setName","description","setDescription","values","setValues","percent","setPercent","color","setColor","updatedAt","setUpdatedAt","deviceUri","timestamp","per","getDevice","WebSocket","onmessage","map","key","style","height","background","startOf","fromNow","Stove","setStatus","setAlarm","heatLevel","setHeatLevel","desiredTemperature","setDesiredTemperature","smokeTemperature","setSmokeTemperature","onOff","setOnOff","faFire","newLevel","parseInt","method","body","JSON","stringify","toString","updateHeatLevel","disabled","newTemp","updateTemperature","updateDeviceState","Home","createBrowserHistory","AppRouter","path","component","exact","ReactDOM","render","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2NAQMA,EAAcC,IAAMC,gBCHpBC,EAAe,SAACC,EAAOC,GACzB,OAAQA,EAAOC,MACX,IAAK,WAIL,IAAK,cACD,MAAO,CACHC,KAAMF,EAAOG,UAErB,QACI,OAAOJ,I,MCJCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCuCSC,EAhDG,WAAO,IACbC,EAAaC,qBAAWC,GAAxBF,SADY,EAEYG,mBAAS,IAFrB,mBAEbV,EAFa,KAEHW,EAFG,OAGMD,mBAAS,IAHf,mBAGbE,EAHa,KAGNC,EAHM,KA0BpB,OACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,mBACf,wBAAIA,UAAU,qBAAd,kCACA,uDAA4B,6BAA5B,mBACA,0BAAMC,SA1BM,SAACC,GAEjBA,EAAEC,iBAGEjB,GAIAO,EAAS,CACLT,KAAM,WACNE,aAGJW,EAAYX,GAEZkB,EAAQC,KAAK,eAVbN,EAAS,yBAqBJD,GAAS,uBAAGE,UAAU,SAASF,GAChC,2BACId,KAAK,OACLsB,YAAY,uBACZC,MAAOrB,EACPsB,SAAU,SAACN,GAAD,OAAOL,EAAYK,EAAEO,OAAOF,QACtCP,UAAU,sBACd,4BAAQA,UAAU,UAAlB,YCIDU,EAtCA,WAAO,IAAD,EACWhB,qBAAWC,GAA/BgB,EADS,EACTA,MAAOlB,EADE,EACFA,SADE,EAEeG,mBAAS,IAFxB,mBAEVgB,EAFU,KAEAC,EAFA,KAiBjB,OACI,4BAAQb,UAAU,eACd,uBAAGA,UAAU,gBAAb,cACA,yBAAKA,UAAU,aACf,0BAAMA,UAAU,YAAYW,EAAM1B,MAC7B0B,GAAS,yBAAKX,UAAU,aAAac,QAlB9B,WAChBD,GAAaD,KAkBD,yBAAKZ,UAAU,gBACf,yBAAKA,UAAU,UAGnB,yBAAKA,UAAWY,EAAW,iBAAmB,WAC1C,4BACI,wBAAIE,QArBH,WACjBrB,EAAS,CACLT,KAAM,cACNC,MAAM,IAEV4B,GAAaD,GACbR,EAAQC,KAAK,OAeG,gB,sDCgCTU,EA/DC,WAAO,IAAD,EACcnB,mBAAS,QADvB,mBACXP,EADW,KACD2B,EADC,OAEoBpB,mBAAS,GAF7B,mBAEXqB,EAFW,KAEEC,EAFF,OAGgBtB,mBAAS,GAHzB,mBAGXuB,EAHW,KAGAC,EAHA,OAIUxB,mBAAS,GAJnB,mBAIXyB,EAJW,KAIHC,EAJG,OAKc1B,mBAAS,GALvB,mBAKX2B,EALW,KAKDC,EALC,OAMM5B,mBAAS,GANf,mBAMX6B,EANW,KAMLC,EANK,KA4BlB,OApBAC,qBAAU,WAAM,4CAEZ,sBAAAC,EAAA,sEACQC,MAAM,iGACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAEFf,EAAYe,EAAS1C,SAAS4C,MAC9Bf,EAAea,EAASG,QAAQjB,aAChCG,EAAaW,EAASG,QAAQC,WAC9Bb,EAAUS,EAASG,QAAQb,QAC3BG,EAAYO,EAASG,QAAQX,UAC7BG,EAAQK,EAASG,QAAQE,eAV/B,4CAFY,0DAiBZC,KACD,IAGC,yBAAKrC,UAAU,eACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,uBAAuBX,EAASiD,eAC7C,uBAAGtC,UAAU,sBAAsBuC,MAASC,OAAO,UAEvD,yBAAKxC,UAAU,uBACX,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,aAGxB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,IACX,kBAAC,IAAD,CAAiByC,KAAMC,IAASC,KAAK,KAAK3C,UAAU,2BAExD,yBAAKA,UAAU,uBACX,8BAAO4C,KAAKC,MAAM5B,GAAa,wCAC/B,0CAAgBE,EAAU,yCAE9B,yBAAKnB,UAAU,uBACX,sCAAYqB,EAAZ,MACA,wCAAcE,EAAd,MACA,oCAAUE,EAAV,UAGR,yBAAKzB,UAAU,gBACX,0BAAMA,UAAU,4BAChB,4D,iBCZD8C,EA/CD,WAAO,IAAD,EACQlD,oBAAS,GADjB,mBACTmD,EADS,KACHC,EADG,KAQhB,OACI,yBAAKhD,UAAU,0BACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,uBAAb,UACA,uBAAGA,UAAU,sBAAb,SAEJ,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,aAGxB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CACIyC,KAAMQ,IACNN,KAAK,KACL3C,UAAW+C,EAAO,SAAW,cAGrC,yBAAK/C,UAAU,uBACV+C,EAAO,0BAAM/C,UAAU,UAAhB,MAAqC,0BAAMA,UAAU,YAAhB,OAC7C,kBAAC,IAAD,CACIQ,SA7BC,WAEjBwC,GAASD,IA4BOG,QAASH,EACTI,eAAe,EACfC,aAAa,EACbC,SAAU,UACVC,QAAS,cAGrB,yBAAKtD,UAAU,gBACX,8DC7BDuD,EAZM,SAAChD,GAClB,OACI,6BACoB,UAAfA,EAAM0B,MAAmC,oBAAf1B,EAAM0B,KAA6B,+BAC9D,yBAAKjC,UAAU,gBACK,QAAfO,EAAM0B,KAAiB,0BAAMjC,UAAU,OAAOO,EAAM0B,KAA7B,MAA8C,8BAAO1B,EAAM0B,MACnE,QAAf1B,EAAM0B,KAAiB,0BAAMjC,UAAU,OAAO4C,KAAKC,MAAMtC,EAAMzB,MAAM,GAAG0E,MAAjD,IAAyDjD,EAAMkD,OAAOC,MAAe,8BAAOd,KAAKC,MAAMtC,EAAMzB,MAAM,GAAG0E,MAAjC,IAAyCjD,EAAMkD,OAAOC,SCyFpKC,EA5FM,WAAO,IAAD,EACC/D,mBAAS,IADV,mBAChBqC,EADgB,KACV2B,EADU,OAEehE,mBAAS,IAFxB,mBAEhBiE,EAFgB,KAEHC,EAFG,OAGKlE,mBAAS,IAHd,mBAGhBmE,EAHgB,KAGRC,EAHQ,OAIOpE,mBAAS,GAJhB,mBAIhBqE,EAJgB,KAIPC,EAJO,OAKGtE,mBAAS,IALZ,mBAKhBuE,EALgB,KAKTC,EALS,OAMWxE,mBAAS,IANpB,mBAMhByE,EANgB,KAMLC,EANK,KAWjBC,EAAY,mHAkDlB,OAhDA5C,qBAAU,WAAM,4CAEZ,sBAAAC,EAAA,sEACUC,MAAM0C,GACXzC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAA0B,GAEDI,EAAQJ,EAAKvB,MACb6B,EAAeN,EAAKK,aACpBS,EAAad,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0F,WACpCR,EAAUR,EAAKjD,OAIX,IAAMkE,EAAOjB,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,KAAO,IAAQ,IACnDU,EAAWO,GACfL,EAASZ,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,SAdxC,4CAFY,0DAoBZkB,KACD,IAEH/C,qBAAU,WAEY,IAAIgD,UA7BZ,uGAgCAC,UAAY,SAAC1E,GAOnB2B,MAAM0C,GACLzC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAA0B,GAEDQ,EAAUR,EAAKjD,OACX,IAAMkE,EAAOjB,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,KAAO,IAAQ,IACnDU,EAAWO,GAEfL,EAASZ,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,YAGzC,IAGC,yBAAKxD,UAAU,2BACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,uBAAuBiC,GACpC,uBAAGjC,UAAU,sBAAsB6D,IAEvC,yBAAK7D,UAAU,uBACX,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,aAGxB,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,2BACV+D,EAAOc,KAAI,SAACtE,GACT,OAAO,kBAAC,EAAD,eAAcuE,IAAKvE,EAAM0B,MAAU1B,QAGlD,yBAAKP,UAAU,gBACX,0BAAMA,UAAU,kBAAkB4C,KAAKC,MAAMoB,GAA7C,KACA,yBAAKjE,UAAU,SAAS+E,MAAO,CAAEC,OAAO,GAAD,OAAKf,EAAL,KAAiBgB,WAAW,IAAD,OAAMd,QAGhF,yBAAKnE,UAAU,gBACX,2CAAiBuC,MAAS2C,QAAQb,GAAWc,cCiI9CC,EAxND,WAAO,IAAD,EACQxF,mBAAS,IADjB,mBACTqC,EADS,KACH2B,EADG,OAEQhE,mBAAS,KAFjB,mBAETmD,EAFS,KAEHC,EAFG,OAGYpD,mBAAS,IAHrB,mBAGDyF,GAHC,aAIUzF,mBAAS,IAJnB,mBAIF0F,GAJE,aAKkB1F,qBALlB,mBAKT2F,EALS,KAKEC,EALF,OAMoC5F,mBAAS,IAN7C,mBAMT6F,EANS,KAMWC,EANX,OAOgC9F,mBAAS,IAPzC,mBAOT+F,EAPS,KAOSC,EAPT,OAQUhG,oBAAS,GARnB,mBAQTiG,EARS,KAQFC,EARE,KAWVvB,EAAY,mHAElB5C,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,sEAEUC,MAAM0C,GACXzC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA0B,GAEFI,EAAQJ,EAAKvB,MACbe,EAAQQ,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,MAC/B6B,EAAU7B,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,MACjC8B,EAAS9B,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,MAChCgC,EAAahC,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,MACpCkC,EAAsBlC,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,MAC7CoC,EAAoBpC,EAAKjD,MAAM,GAAGzB,MAAM,GAAG0E,SAZnD,4CADY,uBAAC,WAAD,wBAgBZkB,GAIIoB,EADQ,MAAT/C,KAMJ,CAACA,EAAMwC,EAAWE,IAgHrB,OACI,yBAAKzF,UAAU,qBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,uBAAuBiC,EAChC,kBAAC,IAAD,CACIQ,KAAMsD,IACNpD,KAAK,KACL3C,UAAoB,MAAT+C,EAAe,SAAW,cAG7C,uBAAG/C,UAAU,sBAAb,SAGJ,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,WAChB,0BAAMA,UAAU,aAGxB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,gBACX,8CACA,6BACI,4BAAQc,QA7GN,WACtB,IAAIkF,EAAWC,SAASV,GAAY,EADR,4CAI5B,sBAAA3D,EAAA,sEACUC,MAAM,yMAA0M,CAClNqE,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB,UAAa9D,MAASC,SAAS8D,WAC/B,KAAQN,EACR,KAAQ,CACJ,GAAM,4CAPtB,4CAJ4B,sBAE5BR,EAAaQ,GAFe,mCAiB5BO,IA4FwDC,UAAWX,GAA/C,KACA,8BAAON,EAAP,MACA,4BAAQzE,QA1FN,WACtB,IAAIkF,EAAWC,SAASV,GAAY,EADR,4CAI5B,sBAAA3D,EAAA,sEACUC,MAAM,yMAA0M,CAClNqE,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB,UAAa9D,MAASC,SAAS8D,WAC/B,KAAQN,EACR,KAAQ,CACJ,GAAM,4CAPtB,4CAJ4B,sBAE5BR,EAAaQ,GAFe,mCAiB5BO,IAyEwDC,UAAWX,GAA/C,OAGR,yBAAK7F,UAAU,gBACX,gDACA,6BACI,4BAAQc,QA3EJ,WACxB,IAAI2F,EAAUR,SAASR,GAAqB,EADd,4CAI9B,sBAAA7D,EAAA,sEACUC,MAAM,yMAA0M,CAClNqE,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB,UAAa9D,MAASC,SAAS8D,WAC/B,KAAQG,EACR,KAAQ,CACJ,GAAM,4CAPtB,4CAJ8B,sBAE9Bf,EAAsBe,GAFQ,mCAiB9BC,IA0D0DF,UAAWX,GAAjD,KACA,8BAAOJ,EAAP,WACA,4BAAQ3E,QAxDJ,WACxB,IAAI2F,EAAUR,SAASR,GAAqB,EADd,4CAI9B,sBAAA7D,EAAA,sEACUC,MAAM,yMAA0M,CAClNqE,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB,UAAa9D,MAASC,SAAS8D,WAC/B,KAAQG,EACR,KAAQ,CACJ,GAAM,4CAPtB,4CAJ8B,sBAE9Bf,EAAsBe,GAFQ,mCAiB9BC,IAuC0DF,UAAWX,GAAjD,OAGR,yBAAK7F,UAAU,gBACX,8CACA,8BAAO2F,EAAP,aAGR,yBAAK3F,UAAU,uBAKD,MAAT+C,EAAe,0BAAM/C,UAAU,UAAhB,MAAqC,0BAAMA,UAAU,YAAhB,OACrD,kBAAC,IAAD,CACIQ,SA/JC,WAAM,4CAQvB,sBAAAoB,EAAA,sEACUC,MAAM,yMAA0M,CAClNqE,OAAQ,QACRC,KAAMC,KAAKC,UAAU,CACjB,UAAa9D,MAASC,SAAS8D,WAC/B,KAAiB,MAATvD,EAAe,IAAM,IAC7B,KAAQ,CACJ,GAAM,4CAPtB,4CARuB,sBACX,MAATA,EACCC,EAAQ,KACQ,MAATD,GACPC,EAAQ,KAJW,mCAqBvB2D,IA2IgBzD,QAAS2C,EACT1C,eAAe,EACfC,aAAa,EACbC,SAAU,UACVC,QAAS,cAIrB,yBAAKtD,UAAU,gBACX,8DCzMD4G,EATF,kBACT,yBAAK5G,UAAU,qBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLKI,EAAUyG,cAcRC,EAZG,kBACd,kBAAC,IAAD,CAAQ1G,QAASA,GACb,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO2G,KAAK,IAAIC,UAAWxH,EAAWyH,OAAO,IAC7C,kBAAC,IAAD,CAAOF,KAAK,aAAaC,UAAWJ,EAAMK,OAAO,QCDjEC,IAASC,OAAO,mBAXE,WAAO,IAAD,EACMC,qBAAWvI,EAAc,IAD/B,mBACb8B,EADa,KACNlB,EADM,KAGpB,OACI,kBAACf,EAAY2I,SAAb,CAAsB9G,MAAO,CAAEI,QAAOlB,aAClC,kBAAC,EAAD,SAMI,MAAe6H,SAASC,eAAe,SVgHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5F,MAAK,SAAA6F,GACJA,EAAaC,gBAEdC,OAAM,SAAA/H,GACLgI,QAAQhI,MAAMA,EAAMiI,c","file":"static/js/main.47c405ec.chunk.js","sourcesContent":["/*\n    Using React's context API for logging a user in/out, and passing the state of the username around in the application\n    Would use Redux for building the application and managing state of the devices,\n    however for only managing the login/logout functionality the context API is sufficient enough\n*/\n\nimport React from 'react';\n\nconst UserContext = React.createContext()\n\nexport { UserContext as default }","/*\n    This is the reducer functionality that the context API is making use of\n    to manage our state withing the application. \n*/\n\nconst usersReducer = (state, action) => {\n    switch (action.type) {\n        case 'ADD_USER':\n            return {\n                user: action.userName\n            }\n        case 'REMOVE_USER':\n            return {\n                user: action.userName\n            }\n        default:\n            return state\n    }\n}\n\nexport { usersReducer as default }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n    This is the 'Login Page'\n    It uses the context API to manage the state of the 'logged in' user, also uses 'history' from the router to change screens\n*/\n\nimport React, { useState, useContext } from 'react';\nimport { history } from '../routers/AppRouter';\nimport UsersContext from '../context/user-context'\n\nconst LoginPage = () => {\n    const { dispatch } = useContext(UsersContext);\n    const [userName, setUserName] = useState('')\n    const [error, setError] = useState('')\n\n    const handleLogin = (e) => {\n        //prevent the browser from a full page reload\n        e.preventDefault();\n\n        //if username field is empty, display error message\n        if(!userName) {\n            setError('Please enter a name')\n        } else {\n            //if username is provided, add username to context\n            dispatch({\n                type: 'ADD_USER',\n                userName\n            })\n            //set username state to input field's value\n            setUserName(userName)\n            //navigate to dashboard page to view devices' current state\n            history.push('/dashboard');\n        }\n    }\n\n\n    return (\n        <div className=\"box-layout\">\n            <div className=\"box-layout__box\">\n            <h1 className=\"box-layout__title\">Welcome to your Smart Home app</h1>\n            <p>Control all your devices <br /> from one place</p>\n            <form onSubmit={handleLogin}>\n                {error && <p className=\"error\">{error}</p>}\n                <input \n                    type=\"text\"\n                    placeholder=\"Who's using the app?\"\n                    value={userName} \n                    onChange={(e) => setUserName(e.target.value)} \n                    className=\"box-layout__input\"/>\n                <button className=\"button\">\n                    OPEN\n                </button>\n            </form>\n            </div>\n        </div>\n    )\n};\n\nexport default LoginPage;\n","/*\n    This is the component for the header\n    It consumes values from the context and displays username, also uses 'history' from the router to change screens\n    Also conditionally renders the username and a user icon\n        (if user is 'logged in' -> \n         there's a dropdown menu displayed after clicking on the user icon -> \n         to 'log out' the user and return to 'Login Page'\n        )\n*/\n\nimport React, { useContext, useState } from 'react';\nimport UsersContext from '../context/user-context'\nimport { history } from '../routers/AppRouter';\n\nconst Header = () => {\n    const { users, dispatch } = useContext(UsersContext)\n    const [isActive, setIsActive] = useState('')\n\n    const handleClick = () => {\n        setIsActive(!isActive)\n    }\n\n    const handleLogOut = () => {\n        dispatch({\n            type: 'REMOVE_USER',\n            user: false\n        })\n        setIsActive(!isActive)\n        history.push('/');\n    }\n\n    return (\n        <header className=\"page-header\">\n            <p className=\"header-title\">Smart Home</p>\n            <div className=\"user-info\">\n            <span className=\"userName\">{users.user}</span>\n                {users && <div className=\"userCircle\" onClick={handleClick}>\n                    <div className=\"face-circle\"></div>\n                    <div className=\"body\"></div>\n                    </div>\n                }\n                <div className={isActive ? 'dd-menu active' : 'dd-menu'}>\n                    <ul>\n                        <li onClick={handleLogOut}>Log out</li>\n                    </ul>\n                </div>\n            </div>\n        </header>\n        \n    )\n};\n\nexport default Header;","/*\n    This is the component for the 'Weather forecast'\n    It fetches data from the Weatherstack API using the 'Fetch API' to display actual weather data\n     (would have used OpenWeatherMap - but ran out of requests allocated for the free tier)\n    Also using moment.js here to display the current day of the week\n*/\n\nimport React, { useEffect, useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCloud } from '@fortawesome/free-solid-svg-icons'\nimport moment from 'moment'\n\nconst Weather = () => {\n    const [location, setLocation] = useState('City')\n    const [temperature, setTemperature] = useState(0)\n    const [feelsLike, setFeelsLike] = useState(0)\n    const [precip, setPrecip] = useState(0)\n    const [humidity, setHumidity] = useState(0)\n    const [wind, setWind] = useState(0)\n\n    useEffect(() => {\n        //Asynchronously fetching weather data using 'Fetch API'\n        async function fetchData() {\n          await fetch(\"http://api.weatherstack.com/current?access_key=b13f21dddfcbe0473a284618c6e3e069&query=Aalborg\")\n          .then(response => response.json())\n          .then(response => {\n              //Using the data coming back from the response we are setting values for the initial state of the component\n              setLocation(response.location.name)\n              setTemperature(response.current.temperature)\n              setFeelsLike(response.current.feelslike)\n              setPrecip(response.current.precip)\n              setHumidity(response.current.humidity)\n              setWind(response.current.wind_speed)\n          })\n          \n        }\n    \n        fetchData();\n    }, []);\n\n    return (\n        <div className=\"device-card\">\n            <div className=\"card__header\">\n                <div className=\"card__header__left\">\n                    <p className=\"card__header--title\">{location.toUpperCase()}</p>\n                    <p className=\"card__header--info\">{moment().format('dddd')}</p>\n                </div>\n                <div className=\"card__header__right\">\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                </div>\n            </div>\n            <div className=\"card__body\">\n                <div className=\"\">\n                    <FontAwesomeIcon icon={faCloud} size=\"6x\" className=\"card__body--cloudIcon\"/>\n                </div>\n                <div className=\"card__body--content\">\n                    <span>{Math.round(temperature)}<sup>&#8451;</sup></span>\n                    <p>Feels like: {feelsLike}<sup>&#8451;</sup></p>\n                </div>\n                <div className=\"card__body--details\">\n                    <p>Precip: {precip} %</p>\n                    <p>Humidity: {humidity} %</p>\n                    <p>Wind: {wind} m/s</p>\n                </div>\n            </div>\n            <div className=\"card__footer\">\n                <span className=\"card__footer--indicator\"></span>\n                <p>Last updated few hours ago</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Weather","/*\n    This is the component for the 'Light switch'\n    Since it does not control an actual device, it basically only serves presentational purposes \n*/\n\nimport React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLightbulb } from '@fortawesome/free-solid-svg-icons'\nimport Switch from \"react-switch\";\n\nconst Light = () => {\n    const [isOn, setIsOn] = useState(false)\n\n    const handleChange = () => {\n        //toggle on/off state on click of the switch controller and set the new state\n        setIsOn(!isOn)\n    }\n\n    return (\n        <div className=\"device-card light-card\">\n            <div className=\"card__header\">\n                <div className=\"card__header__left\">\n                    <p className=\"card__header--title\">Lights</p>\n                    <p className=\"card__header--info\">Home</p>\n                </div>\n                <div className=\"card__header__right\">\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                </div>\n            </div>\n            <div className=\"card__body\">\n                <div className=\"card__body--lightIcon\">\n                    <FontAwesomeIcon \n                        icon={faLightbulb} \n                        size=\"6x\" \n                        className={isOn ? \"active\" : \"inactive\"}\n                    />\n                </div>\n                <div className=\"card__body--content\">\n                    {isOn ? <span className=\"active\">On</span> : <span className=\"inactive\">Off</span>}\n                    <Switch \n                        onChange={handleChange} \n                        checked={isOn} \n                        uncheckedIcon={false} \n                        checkedIcon={false}\n                        offColor={'#3c3c3c'} \n                        onColor={'#103875'}/>\n                </div>\n            </div>\n            <div className=\"card__footer\">\n                <p>Last updated few seconds ago</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Light","/*\n    This is the component for the Indoor module's values\n    It gets the values as a prop from it's parent component and renders them\n    (there's a bit of conditional rendering as the values of 'Alarm' and 'Color indicator' \n     do not need to be displayed together with the actual sensor values\n    )\n*/\n\nimport React from 'react'\n\nconst SensorValues = (value) => {\n    return (\n        <div>\n            {value.name === 'Alarm' || value.name === 'Color indicator' ? <span></span> : \n            <div className=\"sensor-value\">\n                {value.name === 'CO2' ? <span className=\"co2\">{value.name} :</span> : <span>{value.name}</span>}\n                {value.name === 'CO2' ? <span className=\"co2\">{Math.round(value.state[0].data)} {value.number.unit}</span> : <span>{Math.round(value.state[0].data)} {value.number.unit}</span>}\n            </div>}\n        </div>\n    )\n}\n\nexport default SensorValues","/*\n    This is the component for the 'Indoor module - with sensors'\n    It fetches values of the different sensors of the device from the network\n    It also subscribes to changes of the data coming from the sensors through WebSocket - to refresh the displayed values\n        (every 1 minute) -> currently 'only' CO2 sensor\n        as far as I could tell from the response that's the only value that's being refreshed\n    (also uses moment.js to calculate elapsed time from the last update)\n*/\n\nimport React, { useState, useEffect } from 'react'\nimport SensorValues from '../components/SensorValues'\nimport moment from 'moment'\n\nconst SensorDevice = () => {\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n    const [values, setValues] = useState([])\n    const [percent, setPercent] = useState(0)\n    const [color, setColor] = useState('')\n    const [updatedAt, setUpdatedAt] = useState('')\n\n    //WebSocket URI\n    const wsUri = \"wss://www.seluxit.com/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/websocket\";\n    //Indoor module URI\n    const deviceUri = \"/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/67965514-5ddd-4e25-a58d-e52295bb09a7\"\n\n    useEffect(() => {\n        //Asynchronously fetching device's data from the network using 'Fetch API'\n        async function getDevice() {\n            await fetch(deviceUri)\n            .then(response => response.json()).\n            then(data => {\n                //Making use of the data coming back from the response -> we set the inital state of the values that the component is using\n                setName(data.name)\n                setDescription(data.description)\n                setUpdatedAt(data.value[0].state[0].timestamp)\n                setValues(data.value)\n                    //We calculate percentage for the animation to display the changing CO2 level\n                    //We use 3000PPM as the 'maximum' value since constant exposure to that level of CO2 has\n                    //serious consequences to our health\n                    const per = (data.value[0].state[0].data / 3000) * 100\n                    setPercent(per)\n                setColor(data.value[6].state[0].data)\n            })\n        }\n\n        getDevice()\n    }, [])\n\n    useEffect(() => {\n        //We initialize WebSocket connection\n        const websocket = new WebSocket(wsUri);\n\n        //We update CO2 value with the data coming from \n        websocket.onmessage = (e) => {\n            //Could not access attributes from the object coming back with the approach below\n            ///////console.log(JSON.parse(e.data.data))\n            //Also noticed that CO2 value is the only sensor value coming back\n            //So decided to fetch the all the device's values from the network using 'Fetch API'\n\n            //Refresh sensor values by fetching data from network\n            fetch(deviceUri)\n            .then(response => response.json()).\n            then(data => {\n                //Updating the state of values' and calculating percentage using the new values\n                setValues(data.value)\n                    const per = (data.value[0].state[0].data / 3000) * 100\n                    setPercent(per)\n                //Setting the current color coming from the device's color indicator\n                setColor(data.value[6].state[0].data)\n            })\n        }\n    }, [])\n\n    return (\n        <div className=\"device-card sensor-card\">\n            <div className=\"card__header\">\n                <div className=\"card__header__left\">\n                    <p className=\"card__header--title\">{name}</p>\n                    <p className=\"card__header--info\">{description}</p>\n                </div>\n                <div className=\"card__header__right\">\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                </div>\n            </div>\n            <div className=\"sensor-card__body\">\n                <div className=\"sensor-value__container\">\n                    {values.map((value) => {\n                        return <SensorValues key={value.name} {...value}/>\n                    })}\n                </div>\n                <div className=\"progress-bar\">\n                    <span className=\"filler-percent\">{Math.round(percent)}%</span>\n                    <div className=\"filler\" style={{ height: `${percent}%`, background: `#${color}` }}/>\n                </div>\n            </div>\n            <div className=\"card__footer\">\n                <p>Last updated {moment().startOf(updatedAt).fromNow()}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default SensorDevice","/*\n    This is the component for the 'Stove'\n    When the component mounts, it fethches data from the network and sets values coming back from the response to set initial state\n    Also uses moment.js to provide proper time format for 'PATCH request' when modifying device state on the network\n*/\n\nimport React, { useState, useEffect } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFire } from '@fortawesome/free-solid-svg-icons'\nimport Switch from \"react-switch\";\nimport moment from 'moment'\n\nconst Stove = () => {\n    const [name, setName] = useState('')\n    const [isOn, setIsOn] = useState('0')\n    const [status, setStatus] = useState('')\n    const [alarm, setAlarm] = useState('')\n    const [heatLevel, setHeatLevel] = useState()\n    const [desiredTemperature, setDesiredTemperature] = useState('')\n    const [smokeTemperature, setSmokeTemperature] = useState('')\n    const [onOff, setOnOff] = useState(false)\n\n    //Stove device URI\n    const deviceUri = \"/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e\"\n\n    useEffect(() => {\n        async function getDevice() {\n            //Asynchronously fetching device's data from the network using 'Fetch API'\n            await fetch(deviceUri)\n            .then(response => response.json())\n            .then(data => {\n                //Making use of the data coming back from the response -> we set the inital state of the values that the component is using\n                setName(data.name)\n                setIsOn(data.value[0].state[0].data)\n                setStatus(data.value[1].state[0].data)\n                setAlarm(data.value[2].state[0].data)\n                setHeatLevel(data.value[3].state[1].data)\n                setDesiredTemperature(data.value[4].state[1].data)\n                setSmokeTemperature(data.value[5].state[0].data)\n            })\n        }\n        getDevice()\n\n        //Cast isOn value to boolean for switch component\n        if(isOn === '0') {\n            setOnOff(false)\n        } else {\n            setOnOff(true)\n        }\n\n    }, [isOn, heatLevel, desiredTemperature])\n\n    //Turn device on/off\n    const handleChange = () => {\n        if(isOn === '0') {\n            setIsOn('1')\n        } else if (isOn === '1') {\n            setIsOn('0')\n        }\n\n        //Modifying device state with PATH request - to toggle device state on/off\n        async function updateDeviceState() {\n            await fetch('/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e/value/ac455c88-ae17-4fd6-a4f1-1deadbeef01e/state/ac455c88-ae17-4fd6-a4f1-1deadbeef01c', {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    \"timestamp\": moment().format().toString(),\n                    \"data\": isOn === '0' ? '1' : '0',\n                    \"meta\": {\n                        \"id\": \"ac455c88-ae17-4fd6-a4f1-1deadbeef01c\"\n                    }\n                    \n                })\n            })\n        }\n        updateDeviceState()\n    }\n\n    //Decrease heat level of device\n    const decreaseHeatLevel = () => {\n        let newLevel = parseInt(heatLevel) -1\n        setHeatLevel(newLevel)\n\n        async function updateHeatLevel() {\n            await fetch('/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e/value/ac455c88-ae17-4fd6-a4f1-1deadbeef04e/state/ac455c88-ae17-4fd6-a4f1-1deadbeef04c', {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    \"timestamp\": moment().format().toString(),\n                    \"data\": newLevel,\n                    \"meta\": {\n                        \"id\": \"ac455c88-ae17-4fd6-a4f1-1deadbeef04c\"\n                    }\n                    \n                })\n            })\n        }\n        updateHeatLevel()\n    }\n\n    //Increase heat level of device\n    const increaseHeatLevel = () => {\n        let newLevel = parseInt(heatLevel) +1\n        setHeatLevel(newLevel)\n\n        async function updateHeatLevel() {\n            await fetch('/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e/value/ac455c88-ae17-4fd6-a4f1-1deadbeef04e/state/ac455c88-ae17-4fd6-a4f1-1deadbeef04c', {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    \"timestamp\": moment().format().toString(),\n                    \"data\": newLevel,\n                    \"meta\": {\n                        \"id\": \"ac455c88-ae17-4fd6-a4f1-1deadbeef04c\"\n                    }\n                    \n                })\n            })\n        }\n        updateHeatLevel()\n    }\n\n    //Decrease temperature of device\n    const decreaseTemperature = () => {\n        let newTemp = parseInt(desiredTemperature) -1\n        setDesiredTemperature(newTemp)\n\n        async function updateTemperature() {\n            await fetch('/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e/value/ac455c88-ae17-4fd6-a4f1-1deadbeef05e/state/ac455c88-ae17-4fd6-a4f1-1deadbeef05c', {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    \"timestamp\": moment().format().toString(),\n                    \"data\": newTemp,\n                    \"meta\": {\n                        \"id\": \"ac455c88-ae17-4fd6-a4f1-1deadbeef05c\"\n                    }\n                    \n                })\n            })\n        }\n        updateTemperature()\n    }\n\n    //Increase temperature of device\n    const increaseTemperature = () => {\n        let newTemp = parseInt(desiredTemperature) +1\n        setDesiredTemperature(newTemp)\n\n        async function updateTemperature() {\n            await fetch('/smarthome/services/2.0/network/7a8ca0be-3f87-4e8d-ae4f-e4de75323084/device/bc455c88-ae17-4fd6-a4f1-1deadbeef01e/value/ac455c88-ae17-4fd6-a4f1-1deadbeef05e/state/ac455c88-ae17-4fd6-a4f1-1deadbeef05c', {\n                method: 'PATCH',\n                body: JSON.stringify({\n                    \"timestamp\": moment().format().toString(),\n                    \"data\": newTemp,\n                    \"meta\": {\n                        \"id\": \"ac455c88-ae17-4fd6-a4f1-1deadbeef05c\"\n                    }\n                    \n                })\n            })\n        }\n        updateTemperature()\n    }\n\n\n    return (\n        <div className=\"device-card stove\">\n            <div className=\"card__header\">\n                <div className=\"card__header__left\">\n                    <p className=\"card__header--title\">{name}\n                        <FontAwesomeIcon \n                            icon={faFire} \n                            size=\"1x\" \n                            className={isOn === '1' ? \"active\" : \"inactive\"}\n                        />\n                    </p>\n                    <p className=\"card__header--info\">Home</p>\n                </div>\n\n                <div className=\"card__header__right\">\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                    <span className=\"circle\"></span>\n                </div>\n            </div>\n            <div className=\"card__body\">\n                <div className=\"sensor-value__container\">\n                    <div className=\"sensor-value\">\n                        <span>Heat level: </span>\n                        <div>\n                            <button onClick={decreaseHeatLevel} disabled={!onOff}>-</button>\n                            <span>{heatLevel} %</span>\n                            <button onClick={increaseHeatLevel} disabled={!onOff}>+</button>\n                        </div>\n                    </div>\n                    <div className=\"sensor-value\">\n                        <span>Desired temp: </span>\n                        <div>\n                            <button onClick={decreaseTemperature} disabled={!onOff}>-</button>\n                            <span>{desiredTemperature} &#8451;</span>\n                            <button onClick={increaseTemperature} disabled={!onOff}>+</button>\n                        </div>\n                    </div>\n                    <div className=\"sensor-value\">\n                        <span>Smoke temp: </span>\n                        <span>{smokeTemperature} &#8451;</span>\n                    </div>\n                </div>\n                <div className=\"card__body--content\">\n                    {/* \n                        Device's 'STATUS' value (report state) would not update even though 'On/Off value (control state) \n                        can be changed. That is why I am using static text when manipulating state with switch control.\n                    */}\n                    {isOn === '1' ? <span className=\"active\">On</span> : <span className=\"inactive\">Off</span>}\n                    <Switch \n                        onChange={handleChange} \n                        checked={onOff} \n                        uncheckedIcon={false} \n                        checkedIcon={false}\n                        offColor={'#3c3c3c'} \n                        onColor={'#103875'}\n                    />\n                </div>\n            </div>\n            <div className=\"card__footer\">\n                <p>Last updated few seconds ago</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Stove","/*\n    This is the component for the 'Main 'Screen'\n    It displays the different 'devices' - essentially the content of the application underneath the header\n    It is a presentational component with no functionality\n*/\n\nimport React from 'react'\nimport Weather from '../components/Weather'\nimport Light from '../components/Light'\nimport SensorDevice from './SensorDevice'\nimport Stove from './Stove'\n\nconst Home = () => (\n    <div className=\"content-container\">\n        <Weather />\n        <Light />\n        <SensorDevice />\n        <Stove />\n    </div>\n)\n\nexport default Home","/*\n    This is the component for the router\n    Essentially this is what enables us to create navigation in our application\n*/\n\nimport React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport LoginPage from '../components/LoginPage'\nimport Header from '../components/Header'\nimport Home from '../components/Home'\n\nexport const history = createBrowserHistory();\n\nconst AppRouter = () => (\n    <Router history={history}>\n        <div>\n            <Header />\n            <Switch>\n                <Route path=\"/\" component={LoginPage} exact={true}/>\n                <Route path=\"/dashboard\" component={Home} exact={true}/>\n            </Switch>\n        </div>\n    </Router>\n)\n\nexport default AppRouter","import React, { useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport UserContext from './context/user-context'\nimport usersReducer from './reducers/users'\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './routers/AppRouter';\n\nconst SmartHome = () => {\n    const [users, dispatch] = useReducer(usersReducer, '');\n\n    return (\n        <UserContext.Provider value={{ users, dispatch }}>\n            <AppRouter />\n        </UserContext.Provider>\n    )\n} \n\n\nReactDOM.render(<SmartHome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}